* Set 1
** Convert hex to base64
   - Converting hex to base64
   #+BEGIN_SRC python :session :results value
     from base64 import b64decode, b64encode
     import codecs


     def hex2b64(s):
         s = codecs.decode(s, "hex")
         return codecs.decode((b64encode(s)), "ascii")


     def test_hex2b64():
         s = "49276d206b696c6c696e6720796f757220627261696e206c696b65206120706f69736f6e6f7573206d757368726f6f6d"
         t = "SSdtIGtpbGxpbmcgeW91ciBicmFpbiBsaWtlIGEgcG9pc29ub3VzIG11c2hyb29t"
         return t == hex2b64(s)


     test_hex2b64()
   #+END_SRC

   #+RESULTS:
   : True

** XOR two strings together
   - Producing the XOR of two fixed-length strings
   - Always operating with bytes, using hex strings only for presentation
   #+BEGIN_SRC python :session :results value
     import codecs


     def xor_strings(xs, ys):
         return bytes([x ^ y for x, y in zip(xs, ys)])


     def test_xor_strings():
         xs = codecs.decode("1c0111001f010100061a024b53535009181c", "hex")
         ys = codecs.decode("686974207468652062756c6c277320657965", "hex")
         zs = codecs.decode("746865206b696420646f6e277420706c6179", "hex")
         return zs == xor_strings(xs, ys)

     test_xor_strings()
   #+END_SRC

   #+RESULTS:
   : True

** Single byte XOR decryption
   - Decrypt a single byte XOR encrypted message
   - The standard frequencies are taken from [[https://www.wikiwand.com/en/Letter_frequency#/Relative_frequencies_of_letters_in_the_English_language][here]] 
   - Similarity measure is the negative of the distance measure taken from [[https://www.wikiwand.com/en/Bhattacharyya_distance][here]] 
   #+BEGIN_SRC python :session :results value
     import codecs
     import string
     from collections import Counter, defaultdict
     from math import log, sqrt

     n = 1


     def compute_ngram_freqs(n=1):
         p = bytes(''.join(open("pride.txt").readlines()).lower(), 'utf-8')
         bis = [p[i:i+n] for i in range(len(p)-n)]
         top = Counter(bis).most_common(500)
         freqs = defaultdict(lambda: 0)
         for b, c in top:
             freqs[b] = float(c) / len(bis)
         return freqs


     freqs = compute_ngram_freqs(n)


     def english_similarity(m, n=1):
         score = 0
         m = m.lower()
         test_counts = Counter([m[i:i+n] for i in range(len(m)-n)])
         try:
             if (any([codecs.decode(x) not in string.printable
                      for x in test_counts.keys()])):
                 return float('-inf')
         except UnicodeDecodeError:
             return float('-inf')
         total_ngrams = sum(test_counts.values())
         for bi in test_counts.keys():
             test_freq = float(test_counts[bi]) / total_ngrams
             score += sqrt(test_freq * freqs[bi])
         if score == 0:
             return float('-inf')
         else:
             return log(score)


     def decrypt_single_byte_xor(s):
         plain = b""
         score = float('-inf')
         key = None
         for c in range(256):
             candidate_key = [c] * len(s)
             candidate = xor_strings(candidate_key, s)
             candidate_score = english_similarity(candidate, 1)
             if candidate_score > score:
                 score = candidate_score
                 plain = candidate
                 key = c
         return plain, score, key


     def test_decrypt_single_byte_xor():
         s = codecs.decode("1b37373331363f78151b7f2b783431333d78397828372d363c78373e783a393b3736", "hex")
         plain = codecs.encode("Cooking MC's like a pound of bacon")
         return decrypt_single_byte_xor(s)[0] == plain


     test_decrypt_single_byte_xor()
   #+END_SRC

   #+RESULTS:
   : True

** Single byte XOR detections
   - The file "4.txt" has 60 strings, of which one is single-byte XOR encrypted. We need to find it.
   - Reusing the ~english_similarity~ code from the previous challenge, pick the string with the highest candidate similarity.
   #+BEGIN_SRC python :session :results value
     import codecs
     from operator import itemgetter


     def find_single_byte_xor(lines):
         lines = map(decrypt_single_byte_xor, lines)
         return max(lines, key=itemgetter(1))


     def test_find_single_byte_xor():
         lines = open("4.txt").readlines()
         lines = map(lambda x: codecs.decode(x.strip(), "hex"), lines)
         return find_single_byte_xor(lines)[0].strip() == b"Now that the party is jumping"

     test_find_single_byte_xor()
   #+END_SRC

   #+RESULTS:
   : True

** Repeating-key XOR
   - Implement repeating-key XOR
   #+BEGIN_SRC python :session :results value
     import codecs


     def repeating_key_xor(key, plain):
         key = key * (len(plain) // len(key)) + key[:(len(plain) % len(key))]
         return xor_strings(key, plain)


     def test_repeating_key_xor():
         plain = codecs.encode('''Burning 'em, if you ain't quick and nimble
     I go crazy when I hear a cymbal''')
         key = codecs.encode("ICE")
         cipher = codecs.decode('''0b3637272a2b2e63622c2e69692a23693a2a3c6324202d623d63343c2a26226324272765272a282b2f20430a652e2c652a3124333a653e2b2027630c692b20283165286326302e27282f''', "hex")
         return repeating_key_xor(key, plain) == cipher

     test_repeating_key_xor()
   #+END_SRC

   #+RESULTS:
   : True

** Repeating-key XOR decryption
   - Break repeating-key XOR
   - The file "6.txt" has a string that was encrypted with repeating-key XOR and then base64 encoded.
   - Guess the key-length by computing hamming distances between candidate length sized blocks and testing the candidate lengths with the smallest average hamming distances between blocks.
     - We average hamming distances between 4 blocks, normalize by dividing by the candidate keysize, and then use the five keysizes with the least normalized average hamming distances as candidate keysizes.
   - Given the keysize, breaking the ciphertext into blocks and taking the transpose gives you a bunch of single-byte xor problems to solve, the results of which should produce the original key.
     #+BEGIN_SRC python :session :results value
       import codecs
       from operator import itemgetter
       from base64 import b64decode

       def blocks(text):
           return [text[i:i+16] for i in range(0, len(text), 16)]

       def hamming(xs, ys):
           return sum(bin(x ^ y).count("1") for x, y in zip(xs, ys))


       def test_hamming():
           xs = codecs.encode("this is a test")
           ys = codecs.encode("wokka wokka!!!")
           return hamming(xs, ys) == 37


       test_hamming()


       def guess_keysize(ciphertext):
           keysize_weights = []
           for n in range(1, 64):
               a, b, c, d = (ciphertext[:n], ciphertext[n:2*n],
                             ciphertext[2*n:3*n], ciphertext[3*n:4*n])
               h = (hamming(a, b) + hamming(b, c) + hamming(c, d) +
                    hamming(a, c) + hamming(a, d) + hamming(b, d)) / 6 / n
               keysize_weights.append((n, h))
           return list(map(itemgetter(0),
                           sorted(keysize_weights,
                                  key=itemgetter(1))))[0:5]


       def transpose(matrix):
           m, n = len(matrix), len(matrix[0])
           return [[matrix[j][i] for j in range(m)] for i in range(n)]


       def decrypt_repeated_key_xor():
           ciphertext = b64decode("".join(open("6.txt").readlines()))
           guesses = guess_keysize(ciphertext)
           candidates = []
           for ks in guesses:
               blocks = [ciphertext[i:i+ks] for i in range(0, len(ciphertext), ks)]
               # pad to make transpose faster + easier to write (rectangular matrix)
               blocks[-1] = blocks[-1] + b"\x00" * (ks - len(blocks[-1]))
               trans = map(bytes, transpose(blocks))
               trans_plains = list(map(decrypt_single_byte_xor, trans))
               # make sure all columns get a valid decrypt
               if (any(x[0] == b'' for x in trans_plains)):
                   continue

               key = "".join(map(chr, (map(itemgetter(2), trans_plains))))
               trans_plains = list(map(itemgetter(0), trans_plains))
               plaintext = map(bytes, transpose(trans_plains))
               plaintext = b"".join(plaintext)
               candidates.append((plaintext, key))
           return max(candidates, key=lambda x: english_similarity(x[0]))


       print(decrypt_repeated_key_xor()[1])
     #+END_SRC

     #+RESULTS:
     : True

*** Mistakes
    - Messed up splitting into blocks
    - Messed up transposing multiple times
** AES ECB decryption
   - Decrypt a file in AES ECB mode
   #+BEGIN_SRC python :session :results value
     from base64 import b64decode
     from Crypto.Cipher import AES

     def aes_ecb_decrypt(key, ciphertext):
         cipher = AES.new(key, AES.MODE_ECB)
         return cipher.decrypt(ciphertext)

     def test_aes_ecb_decrypt():
         ct = open("7.txt", "r").readlines()
         ct = "".join(x.strip() for x in ct)
         ct = b64decode(ct)
         pt = aes_ecb_decrypt(b"YELLOW SUBMARINE", ct)
         return pt.split(b'\n')[0] == b"I'm back and I'm ringin' the bell "

     test_aes_ecb_decrypt()
   #+END_SRC

   #+RESULTS:
   : True

** AES in ECB mode
   - Detect AES in ECB mode
   - Look for duplicate 16 byte blocks
   #+BEGIN_SRC python :session :results value
     from base64 import b64decode

     def is_probably_aes_ecb(ciphertext):
         blocks = [ciphertext[i:i+16] for i in range(0, len(ciphertext), 16)]
         return len(blocks) != len(set(blocks))

     def test_is_aes_ecb():
         cts = open("8.txt", "r").readlines()
         cts = [b64decode(x) for x in cts]
         cts = [is_probably_aes_ecb(x) for x in cts]
         return sum(cts) == 1

     test_is_aes_ecb()
   #+END_SRC

   #+RESULTS:
   : True

* Set 2
** Implement PKCS#7 padding
   - If n bytes of padding are required, pad with n copies of the byte n 
     #+BEGIN_SRC python :session :results value
       def pkcs7pad(plaintext, n):
           pad = n - len(plaintext)%n
           return plaintext + pad * bytes([pad])

       def test_pkcs7pad():
       pt = b"YELLOW SUBMARINE"
           assert pkcs7pad(pt, 20) == b"YELLOW SUBMARINE\x04\x04\x04\x04"
           pt = b"YELLOW"
           assert pkcs7pad(pt, len(pt)) == pt
           return True

       test_pkcs7pad()
     #+END_SRC
     #+RESULTS:
** Implement CBC mode
    #+BEGIN_SRC python :session :results value
      from base64 import b64decode
      from Crypto.Cipher import AES

      def aes_ecb_encrypt(key, plaintext):
          cipher = AES.new(key, AES.MODE_ECB)
          return cipher.encrypt(plaintext)

      def aes_cbc_encrypt(key, plaintext, iv):
          blocks = [plaintext[i:i+16] for i in range(0, len(plaintext), 16)]
          blocks = [iv] + blocks
          for i in range(1, len(blocks)):
              blocks[i] = xor_strings(blocks[i-1], blocks[i])
              blocks[i] = aes_ecb_encrypt(key, blocks[i])
          return b"".join(blocks[1:])

      def aes_cbc_decrypt(key, ciphertext, iv):
          blocks = [ciphertext[i:i+16] for i in range(0, len(ciphertext), 16)]
          blocks = [iv] + blocks
          for i in range(len(blocks)-1, 0, -1):
              blocks[i] = aes_ecb_decrypt(key, blocks[i])
              blocks[i] = xor_strings(blocks[i-1], blocks[i])
          return b"".join(blocks[1:])

      def test_aes_cbc_decrypt():
          ct = open("10.txt", "r").readlines()
          ct = "".join(x.strip() for x in ct)
          ct = b64decode(ct)
          pt = aes_cbc_decrypt(b"YELLOW SUBMARINE", ct, b"\x00"*16)
          return pt.split(b'\n')[0] == b"I'm back and I'm ringin' the bell "

      test_aes_cbc_decrypt()
    #+END_SRC
    #+RESULTS:
    : True
** An ECB/CBC detection oracle
    #+BEGIN_SRC python :session :results value
      from Crypto.Random import random
      from Crypto.Cipher import AES

      def random_aes_key():
          return Random.new().read(AES.block_size)

      def cbc_or_ecb_oracle(plaintext):
          key = random_aes_key()
          plaintext = pkcs7pad(plaintext, AES.block_size)
          if(random.choice([True, False])):
              return aes_cbc_encrypt(key, plaintext, b"\x00"*16)
          else:
              return aes_ecb_encrypt(key, plaintext)

      def detect_cbc_or_ecb(oracle):
          test = b"A"*AES.block_size*2
          ct = oracle(test)
          if(ct[:AES.block_size] == ct[AES.block_size:2*AES.block_size]):
              return AES.MODE_ECB
          else:
              return AES.MODE_CBC
    #+END_SRC
    #+RESULTS:
** Byte-at-a-time ECB decryption
   #+BEGIN_SRC python :session :results value
     from base64 import b64decode

     key = random_aes_key()
     def ecb_oracle(plaintext):
         secret = b'''Um9sbGluJyBpbiBteSA1LjAKV2l0aCBteSByYWctdG9wIGRvd24gc28gbXkg
     aGFpciBjYW4gYmxvdwpUaGUgZ2lybGllcyBvbiBzdGFuZGJ5IHdhdmluZyBq
     dXN0IHRvIHNheSBoaQpEaWQgeW91IHN0b3A/IE5vLCBJIGp1c3QgZHJvdmUg
     YnkK'''
         secret = b64decode(secret)
         plaintext = pkcs7pad(plaintext + secret, AES.block_size)
         return aes_ecb_encrypt(key, plaintext)

     def find_blocksize(oracle):
         size = len(oracle(b"A"))
         for i in range(64):
             n = len(oracle(b"A"*i))
             if(n != size):
                 return n - size

     def decrypt_ecb_byte_by_byte():
         bs = find_blocksize(ecb_oracle)
         n = len(ecb_oracle(b""))
         guess = n * b"A"
         secret = b""
         # The index of the block to compare (last block of your guess)
         gi = (n-1) // bs
         for i in range(n):
             guess = (n-1-len(secret))*b"A"
             ct = blocks(ecb_oracle(guess))[gi]
             for k in range(255):
                 guessed_ct = blocks(ecb_oracle(guess + secret + bytes([k])))[gi]
                 if(guessed_ct == ct):
                     secret += bytes([k])
                     break
         return secret

     decrypt_ecb_byte_by_byte()
   #+END_SRC

   #+RESULTS:

** ECB cut and paste
   #+BEGIN_SRC python :session :results value
   
   #+END_SRC

   #+RESULTS:

** Byte-at-a-time ECB decryption (harder)
   #+BEGIN_SRC python :session :results value
   
   #+END_SRC

   #+RESULTS:

** PKCS#7 validation
   #+BEGIN_SRC python :session :results value
   
   #+END_SRC

   #+RESULTS:

** CBC bitflipping
   #+BEGIN_SRC python :session :results value
   
   #+END_SRC

   #+RESULTS:

* Set 3
** The CBC padding oracle
   #+BEGIN_SRC python :session :results value
   
   #+END_SRC

   #+RESULTS:

** Implement CTR mode
   #+BEGIN_SRC python :session :results value
   
   #+END_SRC

   #+RESULTS:

** Break fixed-nonce CTR mode (substitutions)
   #+BEGIN_SRC python :session :results value
   
   #+END_SRC

   #+RESULTS:

** Break fixed-nonce CTR mode (statistically)
   #+BEGIN_SRC python :session :results value
   
   #+END_SRC

   #+RESULTS:

** Implement MT19937
   #+BEGIN_SRC python :session :results value
   
   #+END_SRC

   #+RESULTS:

** Crack MT19937 seed
   #+BEGIN_SRC python :session :results value
   
   #+END_SRC

   #+RESULTS:

** Clone MT19937 RNG from output
   #+BEGIN_SRC python :session :results value
   
   #+END_SRC

   #+RESULTS:

** Create the MT19937 stream cipher and break it
   #+BEGIN_SRC python :session :results value
   
   #+END_SRC

   #+RESULTS:

* Set 4
** Break random access read/write AES CTR
   #+BEGIN_SRC python :session :results value
   
   #+END_SRC

   #+RESULTS:

** CTR bitflipping
   #+BEGIN_SRC python :session :results value
   
   #+END_SRC

   #+RESULTS:

** Recover CBC key with IV=Key
   #+BEGIN_SRC python :session :results value
   
   #+END_SRC

   #+RESULTS:

** Implement a SHA-1 keyed MAC
   #+BEGIN_SRC python :session :results value
   
   #+END_SRC

   #+RESULTS:

** Break a SHA-1 keyed MAC (length extension)
   #+BEGIN_SRC python :session :results value
   
   #+END_SRC

   #+RESULTS:

** Break an MD4 keyed MAC (length extension)
   #+BEGIN_SRC python :session :results value
   
   #+END_SRC

   #+RESULTS:

** Implement and break HMAC-SHA1 with an artificial timing leak
   #+BEGIN_SRC python :session :results value
   
   #+END_SRC

   #+RESULTS:

** Break HMAC-SHA1 with less artificial timing leak 
   #+BEGIN_SRC python :session :results value
   
   #+END_SRC

   #+RESULTS:

* Set 5
